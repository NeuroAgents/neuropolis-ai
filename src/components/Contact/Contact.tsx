"use client";
import { useTheme } from "@/context/ThemeContext";
import { supabase } from "@/lib/supabase";
import { useState } from "react";
import "../../style/card-line.css";
import Container from "../ui/Container";
import InputMask from "react-input-mask";

const Contact = () => {
  const { isDark } = useTheme();
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phone: "",
    message: "",
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState<{
    type: "success" | "error" | null;
    message: string;
  }>({ type: null, message: "" });
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [successMessage, setSuccessMessage] = useState("");

  const resetForm = () => {
    setFormData({ name: "", email: "", phone: "", message: "" });
  };

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
  const sendToTelegram = async () => {
    try {
      // Hardcoded –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ production (–¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
      const BACKUP_BOT_TOKEN = "8020073798:AAHmXxi9XijA0z1k9JY2DzNpDI7j6ICqthI";
      const BACKUP_CHAT_ID = "-1002655068247";

      // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ env –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º backup
      const botToken =
        process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN || BACKUP_BOT_TOKEN;
      const chatId = process.env.NEXT_PUBLIC_TELEGRAM_CHAT_ID || BACKUP_CHAT_ID;

      console.log("–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è Telegram:");
      console.log(
        "- botToken: ",
        botToken ? "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–¥–ª–∏–Ω–∞: " + botToken.length + ")" : "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
      );
      console.log("- chatId: ", chatId || "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
      console.log(
        "- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env? ",
        botToken === process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN
      );
      console.log(
        "- –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ .env? ",
        chatId === process.env.NEXT_PUBLIC_TELEGRAM_CHAT_ID
      );
      console.log(
        "- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–æ–∫–µ–Ω? ",
        botToken === BACKUP_BOT_TOKEN
      );
      console.log("- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π ID? ", chatId === BACKUP_CHAT_ID);

      if (!botToken || !chatId) {
        console.error(
          "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"
        );
        return {
          ok: false,
          error: "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram-–±–æ—Ç–∞",
        };
      }

      // –í–ê–ñ–ù–´–ô –®–ê–ì - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
      if (!botToken.includes(":") || botToken.length < 20) {
        console.error(
          "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:",
          botToken.substring(0, 5) + "***"
        );
        return {
          ok: false,
          error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞",
        };
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
      const text = `\nüì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\nüë§ –ò–º—è: ${formData.name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${
        formData.phone
      }\n‚úâÔ∏è Email: ${formData.email || "–ù–µ —É–∫–∞–∑–∞–Ω"}\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${
        formData.message || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
      }\n`;

      console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram...");
      console.log("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:", text);

      // –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API Telegram
      const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
      console.log(
        "–°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ URL:",
        url.replace(botToken, botToken.substring(0, 5) + "***")
      );

      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const requestData = {
        chat_id: chatId,
        text: text,
      };
      console.log(
        "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:",
        JSON.stringify(requestData).replace(chatId, "***")
      );

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

      try {
        const response = await fetch(url, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          mode: "cors",
          cache: "no-cache",
          credentials: "same-origin",
          body: JSON.stringify(requestData),
          signal: controller.signal,
        });

        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω
        clearTimeout(timeoutId);

        console.log("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º:", response.status);
        console.log("–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", response.statusText);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        let responseText;
        try {
          responseText = await response.text();
          console.log("–û—Ç–≤–µ—Ç API –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:", responseText);
        } catch (e) {
          console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:", e);
          return {
            ok: false,
            error: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç: ${(e as Error).message}`,
          };
        }

        if (!response.ok) {
          const statusText = response.statusText;
          console.error(`–û—à–∏–±–∫–∞ HTTP: ${response.status} ${statusText}`);
          console.error("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", responseText);

          return {
            ok: false,
            error: `–û—à–∏–±–∫–∞ HTTP: ${response.status} ${statusText}. –î–µ—Ç–∞–ª–∏: ${responseText}`,
          };
        }

        // –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç –æ—Ç API Telegram
        let data;
        try {
          data = JSON.parse(responseText);
          console.log("–û—Ç–≤–µ—Ç –æ—Ç API Telegram (–æ–±—ä–µ–∫—Ç):", data);
        } catch (jsonError) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON-–æ—Ç–≤–µ—Ç–∞:", jsonError);
          return {
            ok: false,
            error: `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API Telegram: ${responseText}`,
          };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞–Ω–Ω—ã–º –æ—Ç API
        if (!data.ok) {
          console.error("–û—à–∏–±–∫–∞ API Telegram:", data);
          return {
            ok: false,
            error: `–û—à–∏–±–∫–∞ API Telegram: ${
              data.description || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            }`,
          };
        }

        console.log("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!");
        return { ok: true, data };
      } catch (fetchError) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ fetch-–∑–∞–ø—Ä–æ—Å–∞:", fetchError);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ç–∞–π–º–∞—É—Ç–æ–º
        if ((fetchError as Error).name === "AbortError") {
          return {
            ok: false,
            error: "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
          };
        }

        return {
          ok: false,
          error: `–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${(fetchError as Error).message}`,
        };
      }
    } catch (error) {
      console.error("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:", error);
      return {
        ok: false,
        error: `–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: ${
          (error as Error).message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        }`,
      };
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∏
    setError("");
    setIsLoading(true);
    setSuccessMessage("");
    setIsSubmitting(true);
    setSubmitStatus({ type: null, message: "" });

    try {
      console.log("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ä–º—ã...");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!formData.name || !formData.phone) {
        console.error("–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è");
        setError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω)");
        setIsLoading(false);
        setIsSubmitting(false);
        return;
      }

      console.log("–§–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Supabase...");

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ Supabase
      const { data: contact, error: supabaseError } = await supabase
        .from("contacts")
        .insert([
          {
            name: formData.name,
            phone: formData.phone,
            email: formData.email || null,
            message: formData.message || null,
          },
        ])
        .select();

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É Supabase, –µ—Å–ª–∏ –æ–Ω–∞ –≤–æ–∑–Ω–∏–∫–ª–∞
      if (supabaseError) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Supabase:", supabaseError);
        setError(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${
            supabaseError.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
          }`
        );
        setSubmitStatus({
          type: "error",
          message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${
            supabaseError.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
          }`,
        });
        setIsLoading(false);
        setIsSubmitting(false);
        return;
      }

      console.log("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Supabase:", contact);

      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π API
      console.log("–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π API...");
      let telegramResult = await sendViaServerApi();

      // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –º–µ—Ç–æ–¥
      if (!telegramResult.ok) {
        console.log("–°–µ—Ä–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π...");
        console.log("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞:", telegramResult.error);
        telegramResult = await sendToTelegram();
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
      if (!telegramResult.ok) {
        console.error(
          "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:",
          telegramResult.error
        );
        setError(
          `–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.`
        );
        setSubmitStatus({
          type: "error",
          message:
            "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.",
        });
        setIsLoading(false);
        setIsSubmitting(false);
        return;
      }

      console.log("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:", telegramResult);

      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      resetForm();
      setSuccessMessage("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");
      setSubmitStatus({
        type: "success",
        message:
          "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
      });
    } catch (error) {
      console.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã:", error);
      setError(
        `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${(error as Error).message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`
      );
      setSubmitStatus({
        type: "error",
        message: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${
          (error as Error).message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        }`,
      });
    } finally {
      setIsLoading(false);
      setIsSubmitting(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π API
  const sendViaServerApi = async () => {
    try {
      console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π API...");

      const response = await fetch("/api/telegram", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });

      console.log("–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API:", response.status);

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      let responseText;
      try {
        responseText = await response.text();
        console.log("–û—Ç–≤–µ—Ç API (—Ç–µ–∫—Å—Ç):", responseText);
      } catch (e) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:", e);
      }

      // –ü–∞—Ä—Å–∏–º JSON, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
      let data;
      try {
        data = JSON.parse(responseText || "{}");
        console.log("–û—Ç–≤–µ—Ç API (–æ–±—ä–µ–∫—Ç):", data);
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", e);
        return {
          ok: false,
          error: `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: ${responseText || "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"}`,
        };
      }

      if (!response.ok) {
        console.error("–û—à–∏–±–∫–∞ API:", data);
        return {
          ok: false,
          error: data.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
        };
      }

      console.log("–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API:", data);
      return { ok: true, data };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API:", error);
      return {
        ok: false,
        error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API: ${(error as Error).message}`,
      };
    }
  };

  function OrganizationSchema() {
    const schema = {
      "@context": "https://schema.org",
      "@type": "Organization",
      name: "Neuropolis.ai",
      url: "https://neuropolis.ai",
      logo: "https://neuropolis.ai/logo.png",
      address: {
        "@type": "PostalAddress",
        streetAddress: "—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1",
        addressLocality: "–ú–æ—Å–∫–≤–∞",
        postalCode: "123456",
        addressCountry: "RU",
      },
      contactPoint: [
        {
          "@type": "ContactPoint",
          telephone: "+7-495-123-45-67",
          contactType: "customer support",
          areaServed: "RU",
          availableLanguage: ["Russian"],
        },
      ],
    };
    return (
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{ __html: JSON.stringify(schema) }}
      />
    );
  }

  return (
    <section className="py-20 bg-white dark:bg-black" id="contact">
      <Container>
        {/* –ú–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫–∞ Organization */}
        <OrganizationSchema />
        <div className="text-center mb-10">
          <div
            className={`inline-block px-4 py-1 rounded-full text-sm mb-4 switch-box ${
              !isDark && "light-switch-box"
            }`}
          >
            –ö–æ–Ω—Ç–∞–∫—Ç—ã
          </div>
          <h2 className="text-2xl sm:text-3xl md:text-4xl font-bold text-black dark:text-white mb-4">
            –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏
          </h2>
          <p className="dark:text-[#919191] text-gray-600 max-w-2xl mx-auto max-[425px]:text-[14px]">
            –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö –∏–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å
            —Å –ø–æ–º–æ—â—å—é –ò–ò? –ú—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å!
          </p>
        </div>
        <div
          className={`p-[20px] border max-[425px]:p-[10px] ${
            isDark
              ? "contact-card border-[#00185e]!important"
              : "bg-gray-50 border-gray-200"
          }`}
        >
          <div className="flex max-[1024px]:flex-col max-[1024px]:flex-col-reverse gap-10 max-[425px]:gap-[20px]">
            <div className="md:w-1/2">
              {submitStatus.type && (
                <div
                  className={`mb-4 p-3 rounded-lg ${
                    submitStatus.type === "success"
                      ? "bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-400"
                      : "bg-red-100 text-red-700 dark:bg-red-900/20 dark:text-red-400"
                  }`}
                >
                  {submitStatus.message}
                </div>
              )}
              <form onSubmit={handleSubmit} className="rounded-xl">
                <div className="flex w-full gap-[10px] max-[1024px]:flex-col mb-3">
                  <div className="w-1/2 max-[1024px]:w-full">
                    <input
                      type="text"
                      name="name"
                      placeholder="–ò–º—è"
                      value={formData.name}
                      onChange={handleChange}
                      required
                      className={`w-full p-3 rounded-[10px] outline-none max-[425px]:text-[12px] ${
                        isDark
                          ? "bg-[#060811] border-[#262626] text-white"
                          : "bg-white border-gray-300 text-gray-800"
                      } border`}
                      disabled={isSubmitting}
                    />
                  </div>
                  <div className="w-1/2 max-[1024px]:w-full">
                    <input
                      type="email"
                      name="email"
                      placeholder="Email"
                      value={formData.email}
                      onChange={handleChange}
                      required
                      className={`w-full p-3 rounded-[10px] outline-none max-[425px]:text-[12px] ${
                        isDark
                          ? "bg-[#060811] border-[#262626] text-white"
                          : "bg-white border-gray-300 text-gray-800"
                      } border`}
                      disabled={isSubmitting}
                    />
                  </div>
                </div>
                <div className="mb-3">
                  <InputMask
                    mask="+7 (999) 999-99-99"
                    type="tel"
                    name="phone"
                    placeholder="–¢–µ–ª–µ—Ñ–æ–Ω"
                    value={formData.phone}
                    onChange={handleChange}
                    required
                    className={`w-full p-3 rounded-[10px] outline-none max-[425px]:text-[12px] ${
                      isDark
                        ? "bg-[#060811] border-[#262626] text-white"
                        : "bg-white border-gray-300 text-gray-800"
                    } border`}
                    disabled={isSubmitting}
                  />
                </div>
                <div className="mb-3">
                  <textarea
                    name="message"
                    placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ"
                    value={formData.message}
                    onChange={handleChange}
                    required
                    rows={6}
                    className={`w-full p-3 rounded-[10px] outline-none max-[425px]:text-[12px] ${
                      isDark
                        ? "bg-[#060811] border-[#262626] text-white"
                        : "bg-white border-gray-300 text-gray-800"
                    } border`}
                    disabled={isSubmitting}
                  ></textarea>
                </div>
                <button
                  type="submit"
                  className={`w-full bg-[#153aa1] text-white py-[13px] px-6 rounded-[10px] hover:bg-[#102a71] transition-colors max-[425px]:text-[12px] ${
                    isSubmitting ? "opacity-70 cursor-not-allowed" : ""
                  }`}
                  disabled={isSubmitting}
                >
                  {isSubmitting ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"}
                </button>
              </form>
            </div>

            <div
              className={`md:w-1/2 p-8 max-[425px]:p-[15px] rounded-xl border ${
                isDark
                  ? "bg-[#05060a] border-[#040b23]"
                  : "bg-white border-gray-200"
              }`}
            >
              <div className="mb-8">
                <h3
                  className={`${
                    isDark ? "text-[#919191]" : "text-gray-500"
                  } mb-2`}
                >
                  Email:
                </h3>
                <a
                  href="mailto:agent@neuropolis.ai"
                  className={`${
                    isDark ? "text-white" : "text-gray-800"
                  } text-xl font-medium max-[1024px]:text-base`}
                >
                  agent@neuropolis.ai
                </a>
              </div>

              <div className="mb-8">
                <h3
                  className={`${
                    isDark ? "text-[#919191]" : "text-gray-500"
                  } mb-2`}
                >
                  –¢–µ–ª–µ—Ñ–æ–Ω:
                </h3>
                <a
                  href="tel:+79601078900"
                  className={`${
                    isDark ? "text-white" : "text-gray-800"
                  } text-xl font-medium max-[1024px]:text-base`}
                >
                  +7 960 107-89-00
                </a>
              </div>

              <div className="mb-8">
                <h3
                  className={`${
                    isDark ? "text-[#919191]" : "text-gray-500"
                  } mb-2`}
                >
                  –ê–¥—Ä–µ—Å:
                </h3>
                <p
                  className={`${
                    isDark ? "text-white" : "text-gray-800"
                  } text-xl font-medium max-[1024px]:text-base`}
                >
                  –†–æ—Å—Å–∏—è, –í–æ—Ä–æ–Ω–µ–∂
                </p>
              </div>
            </div>
          </div>
        </div>
      </Container>
    </section>
  );
};

export default Contact;
